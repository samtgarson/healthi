function homeInit() {
    console.log("home init"), $(".closed").removeClass("closed"), initSliders();
}

function initSliders() {
    navDealer = new Dragdealer("navWrapper", {
        x: 1,
        steps: 4,
        loose: !0,
        animationCallback: navDuring
    }), contentDealer = new Dragdealer("contentWrapper", {
        x: 1,
        steps: 4,
        loose: !0,
        animationCallback: contentDuring
    });
    $("#navWrapper").on("click", "li", function(e) {
        e.preventDefault();
        var index = $(e.currentTarget).index();
        navDealer.setStep(4 - index, 0);
    });
}

function navDuring(x) {
    "undefined" != typeof contentDealer && ($(".slider-content .handle").css("left", ($("#contentWrapper").width() - $("#contentWrapper .handle").width()) * x + "px"), 
    console.log(x)), $(".selector ul").css("margin-left", 240 * x - 240 + "px");
    var newStep = Math.abs(this.getStep()[0] - 4);
    currentStep != newStep && goalFunc(newStep), currentStep = newStep, sliderTitle(x);
}

function contentDuring(x) {
    "undefined" != typeof navDealer && ($(".slider-nav .handle").css("left", 240 * x + "px"), 
    $(".selector ul").css("margin-left", 240 * x - 240 + "px"));
    var newStep = Math.abs(this.getStep()[0] - 4);
    currentStep != newStep && goalFunc(newStep), currentStep = newStep, sliderTitle(x);
}

function sliderTitle(x) {
    var newTitle = .8 > x ? "goals" : "home";
    newTitle != app.$.View.title && (app.$.View.title = newTitle, $("footer").scrollTop() && $("footer").scrollTop(0));
}

function goalFunc(index) {
    $(".slidee.goals .module").eq(index - 1).removeClass("goalClosed"), $(".slidee.goals .module").not(":eq(" + (index - 1) + ")").addClass("goalClosed");
}

function viewReady() {
    setTimeout(this.init, 0), this.$watch("title", this.$parent.changeTitle);
}

function appReady() {
    "undefined" == typeof storage("user") && this.changePage("login");
}

function loadData() {
    this.user = storage("user"), this.goals = storage("goals");
    for (var i in this.goals) {
        this.goals[i].ticks = [];
        for (var r = this.goals[i].repeat, d = this.goals[i].done, j = 0; r > j; j++) this.goals[i].ticks[j] = d > j ? !0 : !1;
    }
    this.changePage("home");
}

function changePage(newpage) {
    this.view = newpage, setTimeout(function() {
        this.changeTitle(app.$.View.title);
    }, 0);
}

function closeMenu(item) {
    "undefined" == typeof item || $(item.$el).hasClass("current") || this.changePage(item.name), 
    this.changeTitle(this.$.View.title), this.menuOpen = !1;
}

function openMenu() {
    this.menuOpen = !0, this.changeTitle("menu");
}

function changeTitle(newTitle) {
    newTitle != $("span.old").text().toLowerCase() && (document.title = "Healthi: " + newTitle.substr(0, 1).toUpperCase() + newTitle.substr(1, newTitle.length), 
    $("h1#title span").addClass("old"), $("h1#title").prepend("<span class='new'>" + newTitle + "</span>"), 
    setTimeout(function() {
        $(".new").css("margin-top", 0), setTimeout(function() {
            $(".old").remove(), $("span.new").removeClass("new");
        }, 400);
    }, 0));
}

function logout() {
    storage.empty(), this.changePage("login"), this.closeMenu();
}

function loginInit() {
    console.log("login!");
}

function loginClick() {
    var $this = this;
    console.log("clicked!");
    var url = "http://www.json-generator.com/j/bOzOkHnZNK?indent=4";
    $.get(url, function(json) {
        storage.set(json);
    }).done(function() {
        $this.$parent.loadData(), $this.$parent.changePage("home");
    });
}

Vue.component("card", {
    template: "#cardTpl"
});

var navDealer, contentDealer, currentStep = 0;

Vue.component("home", {
    template: "#homeTpl",
    ready: viewReady,
    data: {
        name: "home",
        title: "home"
    },
    methods: {
        init: homeInit
    }
}), Vue.component("login", {
    template: "#loginTpl",
    data: {
        name: "login",
        title: "login"
    },
    methods: {
        init: loginInit,
        loginClick: loginClick
    }
});

var app = new Vue({
    el: "body",
    ready: appReady,
    data: {
        view: "home",
        menuOpen: !1,
        views: [ {
            name: "home",
            icon: "h"
        } ],
        user: {},
        goals: []
    },
    methods: {
        toggleMenu: function() {
            this.menuOpen ? this.closeMenu() : this.openMenu();
        },
        closeMenu: closeMenu,
        changeTitle: changeTitle,
        openMenu: openMenu,
        changePage: changePage,
        appReady: appReady,
        loadData: loadData,
        logout: logout
    }
});